[ 6 ] 메소드
1. 객체지향 이전의 프로그래밍
  - <절차지향> : 절차지향 프로그래밍은 물이 위에서 아래로 흐르는 것처럼 ‘순차적인 처리’가 중요시 되며 프로그램 전체가 유기적으로 연결되도록 만드는 프로그래밍 기법이다. 하지만, 기존의 로직을 다시 사용하게 될 때, 다시 코딩을 하는 방법과 기존 코드를 카피해서 재사용 하는 방식이 있으나 두 방법 모두 비효율적입니다. 동일한 로직의 코드가 문서 내에 넘쳐나, 코드의 양이 너무 길어져 추후에 유지보수가 어려워집니다.
2. 객체지향의 등장배경과 이해
  - 절차지향 프로그래밍의 단점으로 등장한 방식이 메소드(method, 함수)입니다. 로직만 만들어 놓고, 그때 그때 데이터를 주면 메소드가 알아서 결과값을 반환하는 방식입니다. 하지만, 메소드를 이용하며 데이터가 많아지고 메소드가 많아짐에 따라 코드의 양이 많아지고 어려워졌습니다. 하여, 등장한 방식이 객체지향 프로그래밍입니다.
3. 메소드의 이해
  - 메소드란 ? 작업을 수행하기 위한 명령문의 집합이다.
  - 어떤 값을 입력받아 처리하고 그 결과를 돌려준다. (입력 받는 값이 없을 수도 있고 결과를 돌려주지 않을 수 있다.)
  - 메소드의 장점과 작성 지침 : 반복적으로 수행되는 여러 문장를 메소드로 작성한다.
    접근제한자 [static] 리턴type 메소드명([매개변수1, 매개변수2,..]){ 
       //return이 없을 경우 리턴type은 void
	 처리할 프로세스들
	  [return 리턴값;]
}

