[ 04 ] DI(Dependency Injection) 자동 의존 설정과 빈 생명주기와 범위
1. 객체 간 의존 자동 연결 : @Autowired 어노테이션을 이용
2. 스프링 컨테이너 생명 주기
  - 스프링 컨테이너 생성 : GenericXmlApplicationContext ctx = new GenericXmlApplicationContext();
  - 스프링 컨테이너 설정 : ctx.load(“classpath:applicationCTX.xml”); ctx.refresh();
  - 스프링 컨테이너 사용 : Student st = ctx.getBean(“student”,Student.class); st.getName();
  - 스프링 컨테이너 소멸 : ctx.close();
3. 스프링 빈 생명 주기
  - Implements EnvironmentAware - 인터페이스를 이용한 생명주기
    : EnvironmentAware를 implements하면 오버라이드 한 setEnvironment() 생성 : 빈이 만들어지기 전 수행 – 환경 변수에 대한 변경이 생길 시에만 호출됨
  - Implements InitializingBean, DisposableBean - 인터페이스를 이용한 생명주기 관리 방법
    : InitializingBean을 implements하면 오버라이드 한 afterPropertiesSet() 생성 : 빈 초기화 과정(ctx.refresh())에서 호출됨.
    : DisposableBean 을 implements하면 오버라이드 한 destroy() 생성 : 빈 소멸과정(ctx.close())에서 호출됨.
    : ctx.close()의 경우 컨테이너가 소멸하는 단계. 컨테이너가 소멸하면, 빈은 자동 소멸됩니다. 
4. 스프링 빈 범위
  - 스프링 컨테이너가 생성되고, 스프링 빈이 생성될 때, 생성된 스프링 빈은 scope를 가지고 있다.
    범위란 객체가 어디까지 영향을 미치는지 결정하는 것. 기본이 scope="singleton"(cf. scope="prototype")
